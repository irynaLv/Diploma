{
  "name": "extdirect",
  "version": "1.3.2",
  "description": "Ext.Direct connector for Sencha Touch/ExtJs",
  "main": "index.js",
  "scripts": {
    "test": "echo \"Error: no test specified\" && exit 1"
  },
  "repository": {
    "type": "git",
    "url": "git@github.com:jurisv/extdirect.git"
  },
  "keywords": [
    "ext",
    "direct",
    "sencha",
    "touch",
    "extjs",
    "extdirect",
    "remoting",
    "rpc",
    "connector",
    "api"
  ],
  "author": {
    "name": "Juris Vecvanags"
  },
  "license": "BSD",
  "readmeFilename": "README.md",
  "readme": "### Sencha Ext.Direct connector for node.js\n\n#### Compatibility:\n* Sencha Touch 2.3+\n* ExtJs 4.2.x+\n\n#### Example code\nSample applications for Touch and ExtJs can be found here: https://github.com/jurisv/extdirect.examples\n\nThis covers most use cases\n\nExtJs:\n\n    * Application structure with API provider\n    * Grid CRUD Master-detail\n    * Cookie / Session\n    * Direct method call, shows regular call and onw that has hard exception (syntax error)\n    * Form Load / Submit\n    * Form file upload (Cross domain upload is not supported!)\n    * Tree root / child dynamic load\n\nSencha Touch:\n\n    * Application structure with API provider\n    * List read using directFn\n    * Form load / submit\n\n\n####Please refer to provided examples for up to date sample implementation\n\n-\n\n###Client app modifications to support Ext.Direct\n\nThis new approach fully works both in development and production modes.\nNo changes in index.html file are required.\n\n####Touch\n\nCreate new class inside your app folder and name ir DirectAPI.js\n\nFile DirectAPI.js\n```js\nExt.define('DemoTouch.DirectAPI', {\n\n     //Require Ext.Direct classes\n\n    requires: ['Ext.direct.*']\n}, function() {\n    var Loader = Ext.Loader,\n        wasLoading = Loader.isLoading;\n\n    //Loading API\n    Loader.loadScriptFile('http://localhost:3000/directapi', Ext.emptyFn, Ext.emptyFn, null, true);\n    Loader.isLoading = wasLoading;\n\n    // Add provider. Name must match settings on serverside\n    Ext.direct.Manager.addProvider(ExtRemote.REMOTING_API);\n});\n```\n\nFile app.js\n```js\nExt.application({\n    name: 'DemoTouch',\n\n    requires: [\n        'DemoTouch.DirectAPI', // Require API loader\n        'Ext.MessageBox',\n        'DemoTouch.overrides.form.Panel'\n    ],\n\n```\n\n####ExtJS\nCreate new class inside your app folder and name ir DirectAPI.js\n\nFile DirectAPI.js\n```js\nExt.define('DemoExtJs.DirectAPI', {\n\n     //Require Ext.Direct classes\n\n    requires: ['Ext.direct.*']\n}, function() {\n    var Loader = Ext.Loader,\n        wasLoading = Loader.isLoading;\n\n    //Loading API\n    Loader.loadScriptFile('http://localhost:3000/directapi', Ext.emptyFn, Ext.emptyFn, null, true);\n    Loader.isLoading = wasLoading;\n\n    // Add provider. Name must match settings on serverside\n    Ext.direct.Manager.addProvider(ExtRemote.REMOTING_API);\n});\n```\n\nAdd string 'DemoExtJs.DirectAPI' to requires inside Application.js\nFile app.js\n\n```js\nExt.define('DemoExtJs.Application', {\n    name: 'DemoExtJs',\n\n    requires:[\n        'DemoExtJs.DirectAPI'\n    ],\n\n```\n\n-\n###Usage\n####Method signature and structure of method\n\n```js\n    // method signature has 5 parameters\n    /**\n     *\n     * @param params object with received parameters\n     * @param callback callback function to call at the end of current method\n     * @param sessionID - current session ID if \"enableSessions\" set to true, otherwise null\n     * @param request only if \"appendRequestResponseObjects\" enabled\n     * @param response only if \"appendRequestResponseObjects\" enabled\n     */\n    authenticate: function(params, callback, sessionID, request, response){\n        console.log(params)\n        console.log(sessionID);\n        console.log(request);\n        console.log(response);\n\n        /*\n        You have full access to all request properties\n        */\n        console.log(request.session); //e.g. access session data\n\n        /*\n        You can directly modify your response payload, but be careful!\n        */\n        response.header('My-Custom-Header ', '1234567890');\n\n        /*\n        Business logic goes here\n        */\n\n        /*\n        Call callback function at the end\n        */\n        callback({success:true});\n\n        /*\n        //or add some payload data\n        callback({\n            success:true,\n            message:'Login successful',\n            data:{\n                name: 'Juris',\n                surname: 'Vecvanags'\n            }\n        });\n        */\n    }\n\n```\n\n\n####Sample direct methods for CRUD\n\n```js\nvar table = 'todoitem';\nvar db = global.App.database;\n\nvar DXTodoItem  = {\n    create: function(params, callback){\n        var conn = db.connect();\n        delete params['id'];\n        conn.query('INSERT INTO ' + table + ' SET ?', params, function(err, result) {\n\n            if (err) db.debugError(callback, err);\n\n            conn.query('SELECT * FROM '  + table + ' WHERE id = ?', result.insertId, function(err, rows, fields) {\n                db.disconnect(conn); //release connection\n                callback({\n                    success: true,\n                    data: rows[0]\n                });\n            });\n        });\n    },\n\n    //callback as last argument is mandatory\n    read: function(params, callback){\n        var conn = db.connect();\n\n        var sql = 'SELECT * FROM ' + table,\n            where = '';\n\n        //filtering. this example assumes filtering on 1 field, as multiple field where clause requires additional info e.g. chain operator\n\n        if(params.filter){\n            where = \" WHERE `\"+ params.filter[0].property  + \"` LIKE '%\" + params.filter[0].value + \"%'\"; // set your business logic here to perform advanced where clause\n            sql += where;\n        }\n\n        // this sample implementation supports 1 sorter, to have more than one, you have to loop and alter query\n        if(params.sort){\n            var s = params.sort[0];\n            sql = sql + ' ORDER BY ' + conn.escape(s.property) +  ' ' + conn.escape(s.direction);\n        }\n\n        // Paging\n        sql = sql + ' LIMIT ' + conn.escape(params.start) + ' , ' + conn.escape(params.limit);\n\n        conn.query(sql, function(err, rows, fields) {\n            if (err) db.debugError(callback, err);\n\n            //get totals for paging\n\n            var totalQuery = 'SELECT count(*) as totals from ' + table + where;\n\n            conn.query(totalQuery, function(err, rowsTotal, fields) {\n                db.disconnect(conn); //release connection\n                if (err) db.debugError(callback, err);\n\n                callback({\n                    success: true,\n                    data: rows,\n                    total: rowsTotal[0].totals\n                });\n            });\n        });\n    },\n\n    update: function(params, callback){\n        var conn = db.connect();\n\n        conn.query('UPDATE ' + table + ' SET ? where id = ' + conn.escape(params['id']), params, function(err, result) {\n            db.disconnect(conn); //release connection\n            if (err) db.debugError(callback, err);\n            callback({success:true});\n        });\n    },\n\n    destroy: function(params, callback){\n        var conn = db.connect();\n\n        conn.query('DELETE FROM ' + table + ' WHERE id = ?', conn.escape(params['id']), function(err, rows, fields) {\n            if (err) db.debugError(callback, err);\n\n            db.disconnect(conn); //release connection\n            callback({\n                success:rows.affectedRows === 1, //if row successfully removed, affected row will be equal to 1\n                id:params['id']\n            });\n        });\n    }\n};\n\nmodule.exports = DXTodoItem;\n```\n\n####How to configure your application model with direct proxy\n\n```js\nExt.define('TouchDirect.model.TodoItem', {\n    extend: 'Ext.data.Model',\n    config: {\n        idProperty: 'id',\n        fields: [{\n            name: 'id',\n            type: 'int'\n        }, {\n            name: 'text',\n            type: 'string'\n        }, {\n            name: 'complete',\n            type: 'boolean'\n        }],\n\n        proxy: {\n            //Set proxy type\n            type: 'direct',\n\n            //Define action methods\n            api: {\n                create  : ExtRemote.DXTodoItem.create,\n                read    : ExtRemote.DXTodoItem.read,\n                update  : ExtRemote.DXTodoItem.update,\n                destroy : ExtRemote.DXTodoItem.destroy\n            }\n        }\n    }\n});\n\n```\n\nIf you are using component with read only functionality, then you can specify directFn instead.\n```js\nExt.define('DemoTouch.model.TodoItem', {\n    extend: 'Ext.data.Model',\n    config: {\n        idProperty: 'id',\n        fields: [{\n            name: 'id',\n            type: 'int'\n        }, {\n            name: 'text',\n            type: 'string'\n        }, {\n            name: 'complete',\n            type: 'boolean'\n        }],\n        sorters: [\n            {\n                property : \"id\",\n                direction: \"DESC\"\n            }\n        ],\n        proxy: {\n            //Set proxy type\n            type: 'direct',\n\n            //Define direct method. For read only purposes\n            directFn: 'ExtRemote.DXTodoItem.read',\n\n            reader: {\n                type: 'json',\n                rootProperty: 'data',\n                messageProperty:'message'\n            }\n        }\n    }\n});\n```\n\n####How to configure your form\n\n```js\napi:{\n      load: 'ExtRemote.DXFormTest.load',\n      submit:'ExtRemote.DXFormTest.submit'\n}\n```\n\n####File upload inside the form\n\n```js\n{\n    xtype:'form',\n    title: 'File upload',\n    bodyPadding:5,\n    api:{\n        submit:'ExtRemote.DXFormTest.filesubmit'\n    },\n    paramOrder: ['uid'],\n    items:[\n        {\n            xtype:'textfield',\n            fieldLabel:'Description',\n            name:'description'\n        },\n        {\n            xtype: 'filefield',\n            name: 'photo',\n            fieldLabel: 'Photo',\n            labelWidth: 50,\n            msgTarget: 'side',\n            allowBlank: true,\n            anchor: '40%',\n            buttonText: 'Select Photo...'\n        }\n    ],\n    tbar:[\n        {\n            text:'Upload..',\n            handler:function(btn){\n                btn.up('form').getForm().submit(\n                    {\n                        waitMsg: 'Uploading your photo...',\n                        success: function(fp, o) {\n                            Ext.Msg.alert('Success', 'Your photo \"' + o.result.name +\n                                '\" has been uploaded.<br> File size:' + o.result.size + ' bytes.');\n                        }\n                    }\n                );\n            }\n        }\n    ]\n}\n```\n\n#### node.js sample for upload/submit/test/load\n\n\n```js\nvar DXFormTest = {\n    testMe: function(params, callback){\n        callback({\n            success:true,\n            msg:'Hello world',\n            params: params\n        });\n    },\n\n    load: function(params, callback){\n        callback({\n            success:true,\n            data:{\n                firstname:'John',\n                lastname: 'Smith',\n                email: 'john.smith@comapny.info'\n            }\n        });\n    },\n\n    submit: function(params,  callback/*formHandler*/){\n        callback({\n            success:true,\n            params:params\n        });\n    },\n```\n\nWhen dealing with forms that submit via submit api method or upload a file,\nremember to mark your method with formHandler, as shown below:\n\n```js\nfilesubmit: function(params, callback, sessionID, request, response/*formHandler*/){\n        var files = request.files; //get files from request object\n        // console.log(params, files)\n\n        // Do something with uploaded file, e.g. move to another location\n        var fs = require('fs'),\n            file = files.photo,\n            tmp_path = file.path;\n\n        // set where the file should actually exists - in this case it is in the \"demo\" directory\n        var target_path = './public/uploaded_images/' + file.name;\n\n        var successfulUpload = function(cb){\n\n        };\n\n        var failedUpload = function(cd, error){\n\n        };\n\n        // move the file from the temporary location to the intended location\n        // do it only if there is a file with size\n        if(file.size > 0){\n            try{\n                fs.rename(tmp_path, target_path, function(err) {\n                    if(err){\n                        callback({\n                            success: false,\n                            msg: \"Upload failed - can't rename the file\",\n                            errors: err.message\n                        });\n                    }\n                    // delete the temporary file, so that the explicitly set temporary upload dir does not get filled with unwanted files\n                    fs.unlink(tmp_path, function() {\n                        callback({\n                            success: true,\n                            msg: 'Uploaded successfully',\n                            size: file.size,\n                            name: file.name\n                        });\n                    });\n                });\n            }catch(e) {\n//                callback({\n//                    success: false,\n//                    msg: \"Upload failed - can't rename the file\",\n//                    errors: e.message\n//                });\n            }\n        }else{\n            callback({\n                success: false,\n                msg: \"Upload failed - empty file\",\n                params: params,\n                errors: {\n                    clientCode: \"File not found\",\n                    portOfLoading: \"This field must not be null\"\n                }\n            });\n        }\n    }\n\n```\n\n####Direct method invoking\n\nIf you are not relying on widgets, you can always invoke server-side methods if you need them, and receive the response inside the callback.\nThis way you are not limited to existing prebuilt use cases in different widgets.\nSample call would be simple as this:\n\n```js\nExtRemote.DXFormTest.testMe(3,\n    function(res){\n        console.dir(res);\n    }\n);\n```\n\n#### Basic serverside methods and their callbacks\n\n```js\n    //Important! All methods at the end of processing instead of returning value must call callback function.\n    regularFunction: function(params, callback){\n        callback({msg: params});\n    },\n\n    //sample that shows usage of event instead of RPC response\n    messageFunction: function(params, callback){\n        callback({}, 'message'); // add second parameter to callback, this way it wil be converted to event\n    },\n\n    customErrorFunction: function(params, callback){\n        throw new Error(\"Something wrong happened\"); // error handling is now fully supported\n\n        //notice that in the case of error no callback will be invoked\n\n        //if there will be other methods in batch, processing will continue for next transaction\n    }\n\n    //Every method always receive 5 parameters!\n\n    var DXCollection  = {\n        /**\n         *\n         * @param params object with received parameters\n         * @param callback callback function to call at the end of current method\n         * @param sessionID - current session ID if \"enableSessions\" set to true, otherwise null\n         * @param request only if \"appendRequestResponseObjects\" enabled\n         * @param response only if \"appendRequestResponseObjects\" enabled\n         */\n        publish: function(params, callback, sessionID, request, response){\n        //..\n\n```\n\n####Session support\n\nAs of version 1.1.0 sessions are supported within reference implementation. Set enableSessions to true.\nWhen session support is enabled, on all methods 3rd parameter will be set to sessionID otherwise it's value will be null.\nYou have to implement authentication and session handling process according to your business requirements.\nExample code:\n\n```js\nvar DXLogin  = {\n    // method signature has 5 parameters\n    /**\n     *\n     * @param params object with received parameters\n     * @param callback callback function to call at the end of current method\n     * @param sessionID - current session ID if \"enableSessions\" set to true, otherwise null\n     * @param request only if \"appendRequestResponseObjects\" enabled\n     * @param response only if \"appendRequestResponseObjects\" enabled\n     */\n    authenticate: function(params, callback, sessionID, request, response){\n        var username = params.username;\n        var password = params.password;\n        console.log(sessionID);\n        console.log(request);\n        console.log(response);\n\n        /*\n         You have full access to all request properties\n         */\n        console.log(request.session); //e.g. retrieve session data\n\n        response.header('My-Custom-Header ', '1234567890');\n        /*\n         Some code here to check login\n         */\n        callback({success:true, message:'Login successful'});\n\n\n        /*\n        //more detailed callback\n        callback({\n            success: true,\n            message: 'Login successful',\n            data: {\n                firstName: 'Juris',\n                lastName: 'Vecvanags',\n                cookie: request.session.cookie\n            }\n        });\n        */\n    }\n};\n\nmodule.exports = DXLogin;\n```\n\nFor more use cases please refer to Sencha documentation.\n\n####Server 'production' vs 'development' mode\n\nBy default Your node.js server is working in development mode, thus effectively spitting out a lot of useful dev-time info.\nAs of version 1.0.0 connector will look at the mode and change its behavior upon selection. \nFor development mode it will return packets of type 'exception' whenever it will encounter one.\nFor production mode, instead it will return blank 'rpc' packet.\n\nTo change mode you have to set environment variable NODE_ENV to production.\nThere are 2 options.\n1) in Terminal run the command: export NODE_ENV=production\n2) Add permamently to your .bash_profile file:\n\n```sh\necho export NODE_ENV=production >> ~/.bash_profile\nsource ~/.bash_profile\n```\n\n####Explicit 'exception' transactions\n\nSometimes you want to ensure that server won't crash during some actions, and/or send data back to client during process.\nTo do that you have to call the callback with additional parameters, like in this example:\n\n```js\n\nconn.query(totalQuery, function(err, rowsTotal, fields) {\n    mysql.disconnect(conn); //release connection\n\n    //if (err) throw err;\n    // Usually we throw an error like in the line above. This will throw an error to node.js console and exit the application.\n    // As this is totally correct and common practice, sometimes we want to prevent that and treat the error differently\n\n    // This is an example how to send back hard exception\n    // Change totalQuery syntax, so it becomes invalid and observe the results\n    // Client side won't break and if not in production mode, you wil receive message stating what was the error and where it was found\n    // Same applies to any try{..some code that may fail..}catch(err){callback(null, 'exception', err);}\n    if(err){\n        callback(null, 'exception', err);\n    }else{\n        callback({\n            success: true,\n            data: rows,\n            total: rowsTotal[0].totals\n        });\n    }\n\n    //Best practice would be to call predefined method that handles exceptions\n    //For example:\n    debugError: function(fn, error){\n            // Generate SOFT error, instead of throwing hard error.\n            // We send messages with debug ingo only if in development mode\n\n            if(global.App.mode === 'development'){\n                fn({message: {\n                    text: 'Database error',\n                    debug: error\n                }\n                });\n            }else{\n                fn({message: {\n                    text: 'Unknown error',\n                    debug: null\n                }\n                });\n            }\n        }\n\n        //and call it whenever it required:\n        update: function(params, callback){\n                var conn = db.connect();\n\n                conn.query('UPDATE ' + table + ' SET ? where id = ' + conn.escape(params['id']), params, function(err, result) {\n                    db.disconnect(conn); //release connection\n                    if (err) db.debugError(callback, err);\n                    callback({success:true});\n                });\n            },\n\n});\n\n```\n\n#### Direct access to request and response objects\nVersion 1.3.0 adds this functionality if you configure router with parameter \"appendRequestResponseObjects\" and set it to true\nMethod signatures:\n\n```js\n\nrequestObjectsEnabled: function(params, callback, sessionID, request, response){\n\n// Your code here\n\n}\n\nrequestObjectsDisabled: function(params, callback, sessionID){\n\n// Your code here\n\n}\n\n```\n\n\n### Changelog:\n* 1.3.2 (11 jan 2014)\n\n        Add support for relative Url. To keep backward compatibility it's set to false\n\n* 1.3.1 (9 nov 2013)\n\n        Fix parameter mismatch in api.js.\n        Important!\n        If you have floating amount of parameters instead of 1 object 'parameters' this might be a breaking change! Stay with version 1.2.0 or make appropriate changes.\n        Changed file upload example. As we have request object as parameter, you can retrieve uploaded file/s directly from that object\n\n* 1.3.0 (9 nov 2013)\n\n        Add feature to access request and response objects from DX method.\n        Standardize that DX method signature (all methods receive 5 parameters).1st is params from client, then callback, sessionID and request/response if configured to pass those parameters.\n        Add related documentation, link to examples.\n\n* 1.2.0 (23 oct 2013)\n\n        Add feature to explicitly create transaction of type 'exception'\n\n* 1.1.1 (15 oct 2013)\n\n        Update Docs. Fix MySQL examples to prevent SQL Injection vulnerabilities.\n\n* 1.1.0 (24 aug 2013)\n\n        Update docs and sample server-side code to include CORS support\n        Configs for protocol, server, port\n        Refactor to pass one config object instead of multiple parameters\n        New config parameters.\n        Renamed some configs that were confusing. Check ExtDirectConfig config.\n        <b>Important</b> Upgrade from v1.0.0:\n        Adjust node.js main app.js and config.json files. Router and Api functions now expect config object instead of separate ordered parameters.\n\n* 1.0.0 (18 july 2013)\n\n        Announced and pushed to npmjs repository\n\n* 1.0.0 (26 jun 2013)\n\n        Limit exception type of packets to development mode only\n        Add info on development/production mode settings in docs\n        \n* 0.9.9 (19 jun 2013)\n\n        Added Windows support\n\n* 0.9.8 (18 jun 2013)\n\n        Added Session support plus examples\n        Added Proper error handling- failed transactions will be returned as exceptions        \n        Added Event support\n\n* 0.9.7 (26 mar 2013)\n\n        Fixed Markdown in Docs\n\n* 0.9.6 (25 Mar 2013)\n\n        Add form handling\n        Add form file upload feature\n        Add API generation caching\n        Gracefully handle errors\n        Add Code samples in README.md        \n\n* 0.9.5 Minimal stable\n\n* 0.9.0 Public release\n",
  "bugs": {
    "url": "https://github.com/jurisv/extdirect/issues"
  },
  "_id": "extdirect@1.3.2",
  "dist": {
    "shasum": "87bc8bfea4b4045dca66e9514d5b596055aa69f1"
  },
  "_from": "extdirect@",
  "_resolved": "https://registry.npmjs.org/extdirect/-/extdirect-1.3.2.tgz"
}
